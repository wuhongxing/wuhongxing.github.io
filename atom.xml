<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://wuhongxing.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuhongxing.github.io/"/>
  <updated>2023-11-30T01:18:57.566Z</updated>
  <id>https://wuhongxing.github.io/</id>
  
  <author>
    <name>吴红星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模板引擎</title>
    <link href="https://wuhongxing.github.io/2023/11/30/template-engine/"/>
    <id>https://wuhongxing.github.io/2023/11/30/template-engine/</id>
    <published>2023-11-29T22:51:06.000Z</published>
    <updated>2023-11-30T01:18:57.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是模板引擎"><a href="#什么是模板引擎" class="headerlink" title="什么是模板引擎"></a>什么是模板引擎</h2><p>模板引擎是一种用于生成 HTML 页面的工具，它可以将数据插入到 HTML 页面中，从而生成完整的 HTML 页面。</p><h2 id="实现一个-mini-ejs"><a href="#实现一个-mini-ejs" class="headerlink" title="实现一个 mini-ejs"></a>实现一个 mini-ejs</h2><h4 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h4><ol><li>如何执行一段字符串中的 JavaScript 代码？</li></ol><p>方案一: 使用 <code>eval()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>(str)</span><br></pre></td></tr></table></figure><p>方案二: 使用 <code>new Function()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;console.log(&quot;hello world&quot;)&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(str)</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>如何传递参数？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;console.log(&quot;hello world&quot;, a, b)&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, str)</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>优化: 封装成对象传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;console.log(&quot;hello world&quot;, obj.a, obj.b)&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;obj&quot;</span>, str)</span><br><span class="line"><span class="title function_">fun</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure><p>再优化: 使用 <code>with</code> 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;with(obj) &#123;console.log(&quot;hello world&quot;, a, b)&#125;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;obj&quot;</span>, str)</span><br><span class="line"><span class="title function_">fun</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure><h4 id="开始实现"><a href="#开始实现" class="headerlink" title="开始实现"></a>开始实现</h4><p>这个是 <code>ejs</code> 中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if (isShow) &#123; %&#125;</span><br><span class="line">&lt;div&gt;&#123;%= name %&#125;&lt;/div&gt;</span><br><span class="line">&#123;% &#125; else &#123; %&#125;</span><br><span class="line">&lt;div&gt;age: &#123;%= age %&#125;&lt;/div&gt;</span><br><span class="line">&#123;% &#125; %&#125;</span><br></pre></td></tr></table></figure><ol><li><p>解析变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 &#123;%= 解析为 $&#123;，将 %&#125; 解析为 &#125;</span></span><br><span class="line"><span class="comment">// `&lt;div&gt;&#123;%= name %&#125;&lt;/div&gt;` =&gt; `&lt;div&gt;$&#123;name&#125;&lt;/div&gt;`</span></span><br><span class="line"><span class="keyword">let</span> temp =</span><br><span class="line">  <span class="string">&quot;with(obj) &#123; return `&quot;</span> +</span><br><span class="line">  content.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\%\=([^\&#125;]+)\%\&#125;/g</span>, <span class="function">(<span class="params">$0, $1</span>) =&gt;</span> <span class="string">`\$\&#123;<span class="subst">$&#123;$1.trim()&#125;</span>\&#125;`</span>) +</span><br><span class="line">  <span class="string">&quot;`&#125;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>剥离其中的 js 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 %&#123; 变为 `，将 %&#125; 变为 str += `</span></span><br><span class="line"><span class="title function_">with</span>(<span class="params">obj</span>) &#123; <span class="keyword">return</span> <span class="string">`&#123;% if (isShow) &#123; %&#125;</span></span><br><span class="line"><span class="string">&lt;div&gt;<span class="subst">$&#123;name&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#123;% &#125; else &#123; %&#125;</span></span><br><span class="line"><span class="string">&lt;div&gt;age: <span class="subst">$&#123;age&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#123;% &#125; %&#125;</span></span><br><span class="line"><span class="string">`</span>&#125;</span><br><span class="line"><span class="comment">// 就可以转化为下面的结构</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="title function_">with</span>(<span class="params">obj</span>) &#123; <span class="keyword">return</span> str += <span class="string">``</span></span><br><span class="line"><span class="keyword">if</span> (isShow) &#123;</span><br><span class="line">  str += <span class="string">`&lt;div&gt;<span class="subst">$&#123;name&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  str += <span class="string">`&lt;div&gt;age: <span class="subst">$&#123;age&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"> str += <span class="string">``</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp =</span><br><span class="line">  <span class="string">&quot;let str = &#x27;&#x27;; with(obj) &#123; str += `&quot;</span> +</span><br><span class="line">  content.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\%\=([^\&#125;]+)\%\&#125;/g</span>, <span class="function">(<span class="params">$0, $1</span>) =&gt;</span> <span class="string">`\$\&#123;<span class="subst">$&#123;$1.trim()&#125;</span>\&#125;`</span>) +</span><br><span class="line">  <span class="string">&quot;`&#125; return str&quot;</span></span><br><span class="line">temp = temp.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\%([^\%]+)\%\&#125;/g</span>, <span class="function">(<span class="params">$0, $1</span>) =&gt;</span> <span class="string">`\`\n<span class="subst">$&#123;$1&#125;</span>str+=\``</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>构建函数并执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">build</span> = (<span class="params">template, data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;obj&quot;</span>, template)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fn</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">build</span>(temp, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;whx111&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="attr">isShow</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>EJS 实际上是一个 JavaScript 运行时。它的全部工作是执行 JavaScript。如果您运行 EJS 渲染方法而不检查你自己投入，你对结果负责。</p><p>简而言之，请勿提交包含以下代码片段的“漏洞”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, req.<span class="property">query</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/mde/ejs/blob/main/SECURITY.md">SECURITY.md</a><br><a href="https://www.bilibili.com/video/BV15g411F7Th/?spm_id_from=333.337.search-card.all.click">模板引擎是什么？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是模板引擎&quot;&gt;&lt;a href=&quot;#什么是模板引擎&quot; class=&quot;headerlink&quot; title=&quot;什么是模板引擎&quot;&gt;&lt;/a&gt;什么是模板引擎&lt;/h2&gt;&lt;p&gt;模板引擎是一种用于生成 HTML 页面的工具，它可以将数据插入到 HTML 页面中，从而生成完整的 </summary>
      
    
    
    
    
    <category term="mini" scheme="https://wuhongxing.github.io/tags/mini/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo 搭建博客</title>
    <link href="https://wuhongxing.github.io/2023/11/28/build-blog-with-hexo/"/>
    <id>https://wuhongxing.github.io/2023/11/28/build-blog-with-hexo/</id>
    <published>2023-11-28T12:47:11.575Z</published>
    <updated>2023-11-30T01:15:42.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p><code>node</code> 环境、<code>github</code> 账号</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li><p>安装 <code>hexo-cli</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>生成 <code>blog</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>部署<br>3.1 申请一个新的 git 仓库：<code>https://github.com/wuhongxing/wuhongxing.github.io</code></p></li></ol><p>3.2 重写 <code>_config.yml</code> 中的 <code>deploy</code> 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/wuhongxing/wuhongxing.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">初次提交</span></span><br></pre></td></tr></table></figure><p>3.3 安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.4 执行 <code>yarn deploy</code> 即可<br>然后就可以打开 <code>wuhongxing.github.io</code> 就可以看见我们的博客了。</p><h2 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h2><ol><li><p>执行 <code>yarn server</code>，启动一个本地服务，打开页面后，保存更改的内容就能实时看到</p></li><li><p>创建新的文章或者页面，可以使用下面的命令，也可以手动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ex</span></span><br><span class="line">hexo new post &#x27;test&#x27;</span><br></pre></td></tr></table></figure></li></ol><h2 id="主题、插件"><a href="#主题、插件" class="headerlink" title="主题、插件"></a>主题、插件</h2><ol><li><p>可以到 <code>https://hexo.io/themes/</code> 上面挑一个自己喜欢的</p></li><li><p>安装主题</p></li></ol><p>2.1 <code>git clone</code> 到 <code>theme</code> 文件夹中</p><p>2.2 安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br><span class="line">npm install hexo-generator-json-content --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>2.3 在 <code>theme/pure/_config.yml</code> 中开启</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 不蒜子统计</span></span><br><span class="line"></span><br><span class="line"><span class="attr">postCount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否开启文章字数统计</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span>  <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>将 <code>blog/_config.yml</code> 中的 <code>theme</code> 字段改为你刚才的主题名称</p></li><li><p>最后执行 <code>yarn server</code> 就可以看到效果了</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://juejin.cn/post/7267982284007407677?searchId=2023112820282059DD9B8423AA3A81BABC#heading-23">零花费白嫖：免费利用Hexo和GitHub打造个人博客</a></li><li><a href="https://hexo.io/zh-cn/docs/github-pages">官方文档</a></li><li><a href="https://github.com/cofess/hexo-theme-pure">pure</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置准备&quot;&gt;&lt;a href=&quot;#前置准备&quot; class=&quot;headerlink&quot; title=&quot;前置准备&quot;&gt;&lt;/a&gt;前置准备&lt;/h2&gt;&lt;p&gt;&lt;code&gt;node&lt;/code&gt; 环境、&lt;code&gt;github&lt;/code&gt; 账号&lt;/p&gt;
&lt;h2 id=&quot;开始&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://wuhongxing.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
