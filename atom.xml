<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://wuhongxing.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuhongxing.github.io/"/>
  <updated>2023-12-04T15:29:53.285Z</updated>
  <id>https://wuhongxing.github.io/</id>
  
  <author>
    <name>吴红星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mini-promise</title>
    <link href="https://wuhongxing.github.io/2023/12/03/mini-promise/"/>
    <id>https://wuhongxing.github.io/2023/12/03/mini-promise/</id>
    <published>2023-12-03T08:57:11.951Z</published>
    <updated>2023-12-04T15:29:53.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><ol><li><code>promise</code> 有三种状态，<code>pending</code>、<code>fulfilled</code>、<code>rejected</code>，默认为 <code>pending</code></li><li>传入的函数立即执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fulfilledCallbacks</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rejectedCallbacks</span> = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">// 这里要将值保存的原因在于 promise 被创建来之后，还没有 then，当 then 被调用的时候，能取到对应的值</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">      <span class="comment">// 当 then 被绑定时，promise 仍然处于 pending 状态，当 fulfilled 之后需要执行 then</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (status!== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = reason</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">rejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> =<span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="then"><a href="#then" class="headerlink" title="then"></a>then</h2><ol><li>由于 <code>then</code> 支持链式调用，所以我们要生成一个新的 <code>promise</code></li><li>执行 <code>onFulfilled</code>&#x2F;<code>onRejected</code> 时不可以和新的 <code>promise</code> 在同一个上下文</li><li><code>onFulfilled</code>&#x2F;<code>onRejected</code> 的返回值可能是一个 <code>promise</code>，需要将 <code>promise</code> 的值返回</li><li><code>onFulfilled</code>&#x2F;<code>onRejected</code> 是可能出错的，所以需要捕获错误</li><li><code>onFulfilled</code>&#x2F;<code>onRejected</code> 是可选的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果返回的 promise 和 x 是同一个</span></span><br><span class="line">  <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Chaining cycle detected for promise&quot;</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&quot;object&quot;</span> &amp;&amp; x !== <span class="literal">null</span>) || <span class="keyword">typeof</span> x === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 保证不会被多次执行</span></span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> then = x.<span class="property">then</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        then.<span class="title function_">call</span>(</span><br><span class="line">          x,</span><br><span class="line">          <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            处理嵌套的 promise</span></span><br><span class="line"><span class="comment">            new Promise(resolve =&gt; &#123;</span></span><br><span class="line"><span class="comment">              return new Promise(resolve =&gt; &#123;</span></span><br><span class="line"><span class="comment">                return new Promise(resolve =&gt; &#123;</span></span><br><span class="line"><span class="comment">                  resolve(1)</span></span><br><span class="line"><span class="comment">                &#125;)</span></span><br><span class="line"><span class="comment">              &#125;)</span></span><br><span class="line"><span class="comment">            &#125;)</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="title function_">resolvePromise</span>(x, y, resolve, reject)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">reject</span>(r)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">        called = <span class="literal">true</span></span><br><span class="line">        <span class="title function_">resolve</span>(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">      called = <span class="literal">true</span></span><br><span class="line">      <span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟微任务</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runMicroTask</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">global</span>.<span class="property">nextTick</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">global</span>.<span class="title function_">nextTick</span>(fn)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> help = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(fn)</span><br><span class="line">    ob.<span class="title function_">observe</span>(help, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger the observer by modifying the attributes of the div.</span></span><br><span class="line">    help.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-mutation-observer&quot;</span>, <span class="string">&quot;trigger&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(fn, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span>&#123;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onfulfilled, onrejected</span>) &#123;</span><br><span class="line">    onfulfilled =</span><br><span class="line">      <span class="keyword">typeof</span> onfulfilled === <span class="string">&quot;function&quot;</span> ? onfulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onrejected =</span><br><span class="line">      <span class="keyword">typeof</span> onrejected === <span class="string">&quot;function&quot;</span></span><br><span class="line">        ? onrejected</span><br><span class="line">        : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">handleFulfilled</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 不可以放到同一上下文中，不然的话 promise 也无法读取到</span></span><br><span class="line">        <span class="title function_">runMicroTask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onfulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">handleRejected</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">runMicroTask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onrejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="title function_">handleFulfilled</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="title function_">handleRejected</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(handleFulfilled)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(handleRejected)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>无论成功或者失败都会执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">      <span class="function"><span class="params">value</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value),</span><br><span class="line">      <span class="function"><span class="params">reason</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="all"><a href="#all" class="headerlink" title="all"></a>all</h2><ol><li>返回一个新的 <code>promise</code></li><li>将所有的结果都保存在 <code>result</code> 中，当 <code>index === values.length</code> 时，<code>resolve(result)</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">values</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">      result[key] = value</span><br><span class="line">      index += <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (values.<span class="property">length</span> === index) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = values[i]</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isPromise</span>(current)) &#123;</span><br><span class="line">        current.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">processData</span>(i, value)</span><br><span class="line">        &#125;, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">processData</span>(i, current)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><ol><li>如果是普通值，需要将其转化为 <code>promise</code>，后续的才能调用 <code>then</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isPromise</span>(value)) <span class="keyword">return</span> value</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(value))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">  *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="variable language_">this</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">read</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">yield</span> <span class="string">&quot;world&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">co</span>(<span class="params">it</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环没有办法异步，递归是可以的</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">next</span> = r =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; value, done &#125; = it.<span class="title function_">next</span>(r)</span><br><span class="line">      <span class="keyword">if</span> (done) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(value).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>(res)</span><br><span class="line">        &#125;, reject)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">co</span>(<span class="title function_">read</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;constructor-NaN&quot;&gt;&lt;a href=&quot;#constructor-NaN&quot; class=&quot;headerlink&quot; title=&quot;constructor&quot;&gt;&lt;/a&gt;constructor&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;promise&lt;/code&gt;</summary>
      
    
    
    
    <category term="mini" scheme="https://wuhongxing.github.io/categories/mini/"/>
    
    
    <category term="promise" scheme="https://wuhongxing.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>模板引擎</title>
    <link href="https://wuhongxing.github.io/2023/11/30/template-engine/"/>
    <id>https://wuhongxing.github.io/2023/11/30/template-engine/</id>
    <published>2023-11-29T22:51:06.000Z</published>
    <updated>2023-12-03T09:36:25.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是模板引擎"><a href="#什么是模板引擎" class="headerlink" title="什么是模板引擎"></a>什么是模板引擎</h2><p>模板引擎是一种用于生成 HTML 页面的工具，它可以将数据插入到 HTML 页面中，从而生成完整的 HTML 页面。</p><h2 id="实现一个-mini-ejs"><a href="#实现一个-mini-ejs" class="headerlink" title="实现一个 mini-ejs"></a>实现一个 mini-ejs</h2><h4 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h4><ol><li>如何执行一段字符串中的 JavaScript 代码？</li></ol><p>方案一: 使用 <code>eval()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>(str)</span><br></pre></td></tr></table></figure><p>方案二: 使用 <code>new Function()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;console.log(&quot;hello world&quot;)&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(str)</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>如何传递参数？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;console.log(&quot;hello world&quot;, a, b)&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, str)</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>优化: 封装成对象传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;console.log(&quot;hello world&quot;, obj.a, obj.b)&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;obj&quot;</span>, str)</span><br><span class="line"><span class="title function_">fun</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure><p>再优化: 使用 <code>with</code> 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;with(obj) &#123;console.log(&quot;hello world&quot;, a, b)&#125;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;obj&quot;</span>, str)</span><br><span class="line"><span class="title function_">fun</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure><h4 id="开始实现"><a href="#开始实现" class="headerlink" title="开始实现"></a>开始实现</h4><p>这个是 <code>ejs</code> 中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if (isShow) &#123; %&#125;</span><br><span class="line">&lt;div&gt;&#123;%= name %&#125;&lt;/div&gt;</span><br><span class="line">&#123;% &#125; else &#123; %&#125;</span><br><span class="line">&lt;div&gt;age: &#123;%= age %&#125;&lt;/div&gt;</span><br><span class="line">&#123;% &#125; %&#125;</span><br></pre></td></tr></table></figure><ol><li><p>解析变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 &#123;%= 解析为 $&#123;，将 %&#125; 解析为 &#125;</span></span><br><span class="line"><span class="comment">// `&lt;div&gt;&#123;%= name %&#125;&lt;/div&gt;` =&gt; `&lt;div&gt;$&#123;name&#125;&lt;/div&gt;`</span></span><br><span class="line"><span class="keyword">let</span> temp =</span><br><span class="line">  <span class="string">&quot;with(obj) &#123; return `&quot;</span> +</span><br><span class="line">  content.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\%\=([^\&#125;]+)\%\&#125;/g</span>, <span class="function">(<span class="params">$0, $1</span>) =&gt;</span> <span class="string">`\$\&#123;<span class="subst">$&#123;$1.trim()&#125;</span>\&#125;`</span>) +</span><br><span class="line">  <span class="string">&quot;`&#125;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>剥离其中的 js 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 %&#123; 变为 `，将 %&#125; 变为 str += `</span></span><br><span class="line"><span class="title function_">with</span>(<span class="params">obj</span>) &#123; <span class="keyword">return</span> <span class="string">`&#123;% if (isShow) &#123; %&#125;</span></span><br><span class="line"><span class="string">&lt;div&gt;<span class="subst">$&#123;name&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#123;% &#125; else &#123; %&#125;</span></span><br><span class="line"><span class="string">&lt;div&gt;age: <span class="subst">$&#123;age&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#123;% &#125; %&#125;</span></span><br><span class="line"><span class="string">`</span>&#125;</span><br><span class="line"><span class="comment">// 就可以转化为下面的结构</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="title function_">with</span>(<span class="params">obj</span>) &#123; <span class="keyword">return</span> str += <span class="string">``</span></span><br><span class="line"><span class="keyword">if</span> (isShow) &#123;</span><br><span class="line">  str += <span class="string">`&lt;div&gt;<span class="subst">$&#123;name&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  str += <span class="string">`&lt;div&gt;age: <span class="subst">$&#123;age&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"> str += <span class="string">``</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp =</span><br><span class="line">  <span class="string">&quot;let str = &#x27;&#x27;; with(obj) &#123; str += `&quot;</span> +</span><br><span class="line">  content.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\%\=([^\&#125;]+)\%\&#125;/g</span>, <span class="function">(<span class="params">$0, $1</span>) =&gt;</span> <span class="string">`\$\&#123;<span class="subst">$&#123;$1.trim()&#125;</span>\&#125;`</span>) +</span><br><span class="line">  <span class="string">&quot;`&#125; return str&quot;</span></span><br><span class="line">temp = temp.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\%([^\%]+)\%\&#125;/g</span>, <span class="function">(<span class="params">$0, $1</span>) =&gt;</span> <span class="string">`\`\n<span class="subst">$&#123;$1&#125;</span>str+=\``</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>构建函数并执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">build</span> = (<span class="params">template, data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;obj&quot;</span>, template)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fn</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">build</span>(temp, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;whx111&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="attr">isShow</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://github.com/wuhongxing/mini-ejs">完整代码</a></p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>EJS 实际上是一个 JavaScript 运行时。它的全部工作是执行 JavaScript。如果您运行 EJS 渲染方法而不检查你自己投入，你对结果负责。</p><p>简而言之，请勿提交包含以下代码片段的“漏洞”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, req.<span class="property">query</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/mde/ejs/blob/main/SECURITY.md">SECURITY.md</a><br><a href="https://www.bilibili.com/video/BV15g411F7Th/?spm_id_from=333.337.search-card.all.click">模板引擎是什么？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是模板引擎&quot;&gt;&lt;a href=&quot;#什么是模板引擎&quot; class=&quot;headerlink&quot; title=&quot;什么是模板引擎&quot;&gt;&lt;/a&gt;什么是模板引擎&lt;/h2&gt;&lt;p&gt;模板引擎是一种用于生成 HTML 页面的工具，它可以将数据插入到 HTML 页面中，从而生成完整的 </summary>
      
    
    
    
    <category term="mini" scheme="https://wuhongxing.github.io/categories/mini/"/>
    
    
    <category term="模板引擎" scheme="https://wuhongxing.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo 搭建博客</title>
    <link href="https://wuhongxing.github.io/2023/11/28/build-blog-with-hexo/"/>
    <id>https://wuhongxing.github.io/2023/11/28/build-blog-with-hexo/</id>
    <published>2023-11-28T12:47:11.575Z</published>
    <updated>2023-11-30T01:38:39.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p><code>node</code> 环境、<code>github</code> 账号、<code>VPN</code></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li><p>安装 <code>hexo-cli</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>生成 <code>blog</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>部署<br>3.1 申请一个新的 git 仓库：<code>https://github.com/wuhongxing/wuhongxing.github.io</code></p></li></ol><p>3.2 重写 <code>_config.yml</code> 中的 <code>deploy</code> 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/wuhongxing/wuhongxing.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">初次提交</span></span><br></pre></td></tr></table></figure><p>3.3 安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.4 执行 <code>yarn clean &amp; yarn deploy</code> 即可<br>然后就可以打开 <code>wuhongxing.github.io</code> 就可以看见我们的博客了。</p><h2 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h2><ol><li><p>执行 <code>yarn server</code>，启动一个本地服务，打开页面后，保存更改的内容就能实时看到</p></li><li><p>创建新的文章或者页面，可以使用下面的命令，也可以手动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ex</span></span><br><span class="line">hexo new post &#x27;test&#x27;</span><br></pre></td></tr></table></figure></li></ol><h2 id="主题、插件"><a href="#主题、插件" class="headerlink" title="主题、插件"></a>主题、插件</h2><ol><li><p>可以到 <code>https://hexo.io/themes/</code> 上面挑一个自己喜欢的</p></li><li><p>安装主题</p></li></ol><p>2.1 <code>git clone</code> 到 <code>theme</code> 文件夹中</p><p>2.2 安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br><span class="line">npm install hexo-generator-json-content --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>2.3 在 <code>theme/pure/_config.yml</code> 中开启</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 不蒜子统计</span></span><br><span class="line"></span><br><span class="line"><span class="attr">postCount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否开启文章字数统计</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span>  <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>将 <code>blog/_config.yml</code> 中的 <code>theme</code> 字段改为你刚才的主题名称</p></li><li><p>最后执行 <code>yarn server</code> 就可以看到效果了</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://juejin.cn/post/7267982284007407677?searchId=2023112820282059DD9B8423AA3A81BABC#heading-23">零花费白嫖：免费利用Hexo和GitHub打造个人博客</a></li><li><a href="https://hexo.io/zh-cn/docs/github-pages">官方文档</a></li><li><a href="https://github.com/cofess/hexo-theme-pure">pure</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置准备&quot;&gt;&lt;a href=&quot;#前置准备&quot; class=&quot;headerlink&quot; title=&quot;前置准备&quot;&gt;&lt;/a&gt;前置准备&lt;/h2&gt;&lt;p&gt;&lt;code&gt;node&lt;/code&gt; 环境、&lt;code&gt;github&lt;/code&gt; 账号、&lt;code&gt;VPN&lt;/code&gt;&lt;/</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://wuhongxing.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
