{"meta":{"title":"Hexo","subtitle":"","description":"","author":"吴红星","url":"https://wuhongxing.github.io","root":"/"},"pages":[],"posts":[{"title":"模板引擎","slug":"template-engine","date":"2023-11-29T22:51:06.000Z","updated":"2023-11-30T01:38:51.093Z","comments":true,"path":"2023/11/30/template-engine/","permalink":"https://wuhongxing.github.io/2023/11/30/template-engine/","excerpt":"","text":"什么是模板引擎模板引擎是一种用于生成 HTML 页面的工具，它可以将数据插入到 HTML 页面中，从而生成完整的 HTML 页面。 实现一个 mini-ejs前置准备 如何执行一段字符串中的 JavaScript 代码？ 方案一: 使用 eval() 12const str = console.log(&#x27;hello world&#x27;)eval(str) 方案二: 使用 new Function() 123const str = &#x27;console.log(&quot;hello world&quot;)&#x27;const fn = new Function(str)fn() 如何传递参数？ 123const str = &#x27;console.log(&quot;hello world&quot;, a, b)&#x27;const fun = new Function(&quot;a&quot;, &quot;b&quot;, str)fun(1, 2) 优化: 封装成对象传递 123const str = &#x27;console.log(&quot;hello world&quot;, obj.a, obj.b)&#x27;const fun = new Function(&quot;obj&quot;, str)fun(&#123; a: 1, b: 2 &#125;) 再优化: 使用 with 语句 123const str = &#x27;with(obj) &#123;console.log(&quot;hello world&quot;, a, b)&#125;&#x27;const fun = new Function(&quot;obj&quot;, str)fun(&#123; a: 1, b: 2 &#125;) 开始实现这个是 ejs 中的内容 12345&#123;% if (isShow) &#123; %&#125;&lt;div&gt;&#123;%= name %&#125;&lt;/div&gt;&#123;% &#125; else &#123; %&#125;&lt;div&gt;age: &#123;%= age %&#125;&lt;/div&gt;&#123;% &#125; %&#125; 解析变量 123456// 将 &#123;%= 解析为 $&#123;，将 %&#125; 解析为 &#125;// `&lt;div&gt;&#123;%= name %&#125;&lt;/div&gt;` =&gt; `&lt;div&gt;$&#123;name&#125;&lt;/div&gt;`let temp = &quot;with(obj) &#123; return `&quot; + content.replace(/\\&#123;\\%\\=([^\\&#125;]+)\\%\\&#125;/g, ($0, $1) =&gt; `\\$\\&#123;$&#123;$1.trim()&#125;\\&#125;`) + &quot;`&#125;&quot; 剥离其中的 js 语句 123456789101112131415161718// 将 %&#123; 变为 `，将 %&#125; 变为 str += `with(obj) &#123; return `&#123;% if (isShow) &#123; %&#125;&lt;div&gt;$&#123;name&#125;&lt;/div&gt;&#123;% &#125; else &#123; %&#125;&lt;div&gt;age: $&#123;age&#125;&lt;/div&gt;&#123;% &#125; %&#125;`&#125;// 就可以转化为下面的结构let str = &#x27;&#x27;with(obj) &#123; return str += ``if (isShow) &#123; str += `&lt;div&gt;$&#123;name&#125;&lt;/div&gt;`&#125; else &#123; str += `&lt;div&gt;age: $&#123;age&#125;&lt;/div&gt;`&#125; str += ``&#125;return str 12345let temp = &quot;let str = &#x27;&#x27;; with(obj) &#123; str += `&quot; + content.replace(/\\&#123;\\%\\=([^\\&#125;]+)\\%\\&#125;/g, ($0, $1) =&gt; `\\$\\&#123;$&#123;$1.trim()&#125;\\&#125;`) + &quot;`&#125; return str&quot;temp = temp.replace(/\\&#123;\\%([^\\%]+)\\%\\&#125;/g, ($0, $1) =&gt; `\\`\\n$&#123;$1&#125;str+=\\``) 构建函数并执行123456789const build = (template, data) =&gt; &#123; const fn = new Function(&quot;obj&quot;, template) return fn(data)&#125;const res = build(temp, &#123; name: &quot;whx111&quot;, age: &quot;100&quot;, isShow: true&#125;) 完整代码 安全性EJS 实际上是一个 JavaScript 运行时。它的全部工作是执行 JavaScript。如果您运行 EJS 渲染方法而不检查你自己投入，你对结果负责。 简而言之，请勿提交包含以下代码片段的“漏洞”： 123app.get(&#x27;/&#x27;, (req, res) =&gt; &#123; res.render(&#x27;index&#x27;, req.query);&#125;); 参考SECURITY.md模板引擎是什么？","categories":[{"name":"js","slug":"js","permalink":"https://wuhongxing.github.io/categories/js/"}],"tags":[{"name":"mini","slug":"mini","permalink":"https://wuhongxing.github.io/tags/mini/"},{"name":"模板引擎","slug":"模板引擎","permalink":"https://wuhongxing.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"}]},{"title":"使用 Hexo 搭建博客","slug":"build-blog-with-hexo","date":"2023-11-28T12:47:11.575Z","updated":"2023-11-30T01:38:39.001Z","comments":true,"path":"2023/11/28/build-blog-with-hexo/","permalink":"https://wuhongxing.github.io/2023/11/28/build-blog-with-hexo/","excerpt":"","text":"前置准备node 环境、github 账号、VPN 开始 安装 hexo-cli 1npm install -g hexo-cli 生成 blog 123hexo init blogcd blognpm install 部署3.1 申请一个新的 git 仓库：https://github.com/wuhongxing/wuhongxing.github.io 3.2 重写 _config.yml 中的 deploy 配置 12345deploy: type: git repo: https://github.com/wuhongxing/wuhongxing.github.io.git branch: main message: 初次提交 3.3 安装插件 1npm install hexo-deployer-git --save 3.4 执行 yarn clean &amp; yarn deploy 即可然后就可以打开 wuhongxing.github.io 就可以看见我们的博客了。 开始写作 执行 yarn server，启动一个本地服务，打开页面后，保存更改的内容就能实时看到 创建新的文章或者页面，可以使用下面的命令，也可以手动 123hexo new [layout] &lt;title&gt;# exhexo new post &#x27;test&#x27; 主题、插件 可以到 https://hexo.io/themes/ 上面挑一个自己喜欢的 安装主题 2.1 git clone 到 theme 文件夹中 2.2 安装依赖 12345npm install hexo-wordcount --savenpm install hexo-generator-json-content --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 2.3 在 theme/pure/_config.yml 中开启 1234567busuanzi: enable: true # 不蒜子统计postCount: enable: true # 是否开启文章字数统计 wordcount: true # 文章字数统计 min2read: true 将 blog/_config.yml 中的 theme 字段改为你刚才的主题名称 最后执行 yarn server 就可以看到效果了 参考 零花费白嫖：免费利用Hexo和GitHub打造个人博客 官方文档 pure","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://wuhongxing.github.io/tags/hexo/"}]}],"categories":[{"name":"js","slug":"js","permalink":"https://wuhongxing.github.io/categories/js/"}],"tags":[{"name":"mini","slug":"mini","permalink":"https://wuhongxing.github.io/tags/mini/"},{"name":"模板引擎","slug":"模板引擎","permalink":"https://wuhongxing.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"},{"name":"hexo","slug":"hexo","permalink":"https://wuhongxing.github.io/tags/hexo/"}]}